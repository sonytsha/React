numbers = [1,2,3,4,5];

numbers.filter(....);
numbers.map(....);

array.push(..)
array.pop(....)

numbers = [1,2,3,4,5];
numbers.push(6) --------> [1,2,3,4,5,6]
numbers.pop(); --------> [1,2,3,4,5]
let last = numbers.pop();
last is 6

What if we want to insert or remove an element somewhere in the middle or at the beginning of our array? Well, in order to do this, there's another array function called splice. 

array.splice(...)

Splice takes three basic arguments. The first argument is the index we want splice to start at. The second argument is how many elements of the array starting at the index we 
specified, we wanna remove from the array. And the third argument, the fourth argument, and so on, we can pass as many other arguments as we want, our elements that we want to
insert at the index that we specified in the first argument. 

array.splice(
startingIndex,
removeHowMany,
...elementToAdd,
);

*********************************************window.location.reload() ---- to clear the console***********************************

let numbers = [1,2,3,4,5,6];
undefined
numbers.splice(2,1);
[3]
numbers
(5) [1, 2, 4, 5, 6]
numbers.splice(2,0,100);
[]
numbers
(6) [1, 2, 100, 4, 5, 6]
numbers.splice(0,2,"one","two")
(2) [1, 2]
numbers
(6) ['one', 'two', 100, 4, 5, 6]

--------------------------------------------------------------------------------------------------------------------------

IndexOf :
array.indexOf(...)

numbers = [ 1,2,3,4,5,6];
nummbers.indexOf(5); =========> 4
numbers.indexOf(99); ===============> -1
-------------------------------------------------------------------------------------------------------
array.find(...) : 
array.find(function(x) {
return x > 3;
});

let numbers = [1,2,3,4,5,6]
undefined
numbers.find(function(x) {
    return x > 4;
});
5
numbers.find(function(x) {
    return x > 100;
});
undefined

--------------------------------------------------------------------------------------------------------------

array.filer(...)

number = [1,2,3,4,5,6]

number.filter( function(x) {
    return x % 2 == 0;
})
(3) [2, 4, 6]

number
(6) [1, 2, 3, 4, 5, 6]
let evens = number.filter( function(x) {
    return x % 2 == 0;
})
undefined
evens
(3) [2, 4, 6]

-----------------------------------------------------------------------------------------------------


array.map(....)

number
(6) [1, 2, 3, 4, 5, 6]
number.map(function(x) {
    return x * 2;
})
(6) [2, 4, 6, 8, 10, 12]
number
(6) [1, 2, 3, 4, 5, 6]
---------------------------------

other array functions 
array.reduce(...)
array.sort(...)
array.some(....)
array.every(...)

