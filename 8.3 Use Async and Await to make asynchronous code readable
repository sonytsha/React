The goal is to wrire asynchronous code that looks synchronous

Instead of : 
fs.readfile('someFie.txt', contents => {
// ...
});
readFile('someFile.txt')
.then(contents => {
// ... 
});

We can do : 

var contents = await readFile('someFile.txt');

Async / Await is just 'syntactic sugar' for Promises

how to convert this into short : 
fetch ( 'www.someapi.com/data')
.then (response => {
return response.json();
})
.then ( data => {
console.log(data);
});

instead of the above, we can write : 
let response = await fetch ( 'www.someapi.com/data')
let data = await response.json();
console.log(data);



let response = await fetch ( 'www.someapi.com/data')
let data = await response.json();
console.log(data);
console.log("This Asyc stuff is not done yet");

how to write try catch finally using Async and await : 
try {
let response = await 
fetch ( 'www.someapi.com/data')
let data = await response.json();
console.log(data);
}
catch ( err ) {
console.log('help! an error occured');
} finally {
// do some clean up or something 
}

"await " can not be used directly in a JS file
it must be inside a function 

for example : 
this can not be used : let x = await someAsyncFunction();

any function that containts the "await" keyword must be labeled with the "async" keyword : 

function doSomethingAsyncStuff = async function() {
let x = await someAsyncFunction();
}


example : 

function doSomething() {
return new Promise ( resolve, reject ) => {
setTiemout() => {
resolve("Success!");
}, 1000);
});
}
async function execute () {
try {
let messager = await doSomething();
console.log(message);
} catch( error) {
console.log(error);
} finally { 
console.log("I am done");
}
}




function doSomething() {
return new Promise ( resolve, reject ) => {
setTiemout() => {
reject("Error!");
}, 1000);
});
}
async function execute () {
try {
let messager = await doSomething();
console.log(message);
} catch( error) {
console.log(error);
} finally { 
console.log("I am done");
}
}



